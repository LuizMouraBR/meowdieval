[gd_resource type="ShaderMaterial" load_steps=3 format=3 uid="uid://cwulukys0hwcd"]

[ext_resource type="Texture2D" uid="uid://c4ggdp0kg5wjk" path="res://assets/textures/grassbushcc008.png" id="1_fp2dd"]

[sub_resource type="Shader" id="Shader_fp2dd"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.4.1.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_disabled, diffuse_burley, specular_schlick_ggx;

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;

uniform float distance_fade_min : hint_range(0.0, 4096.0, 0.01);
uniform float distance_fade_max : hint_range(0.0, 4096.0, 0.01);
uniform float alpha_scissor_threshold : hint_range(0.0, 1.0, 0.001);
uniform ivec2 albedo_texture_size;
uniform float point_size : hint_range(0.1, 128.0, 0.1);

uniform float roughness : hint_range(0.0, 1.0);
uniform sampler2D texture_metallic : hint_default_white, filter_linear_mipmap, repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r, filter_linear_mipmap, repeat_enable;

uniform float specular : hint_range(0.0, 1.0, 0.01);
uniform float metallic : hint_range(0.0, 1.0, 0.01);

uniform vec4 backlight : source_color;
uniform sampler2D texture_backlight : hint_default_black, filter_linear_mipmap, repeat_enable;

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

uniform float sway_strength : hint_range(0.0, 1.0) = 0.2;
uniform float sway_speed : hint_range(0.1, 10.0) = 2.0;
uniform float sway_scale : hint_range(0.1, 10.0) = 1.0;

void vertex() {
	UV = UV * uv1_scale.xy + uv1_offset.xy;
	
	// Create some pseudo-random variation per instance
    float sway_phase = sin(VERTEX.x * 0.1 + VERTEX.z * 0.1);
    
    // World position based sway
    float sway = sin(TIME * sway_speed + (VERTEX.x + VERTEX.z) * sway_scale + sway_phase);

    // Apply sway only above ground (e.g., don't move the base of the grass)
    float height_factor = clamp(VERTEX.y, 0.0, 1.0);

    VERTEX.x += sway * sway_strength * height_factor;
}

void fragment() {
	vec2 base_uv = UV;

	vec4 albedo_tex = texture(texture_albedo, base_uv);

	// Vertex Color Use as Albedo: Enabled
	albedo_tex *= COLOR;

	ALBEDO = albedo.rgb * albedo_tex.rgb;

	float metallic_tex = dot(texture(texture_metallic, base_uv), metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	SPECULAR = specular;

	vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
	float roughness_tex = dot(texture(texture_roughness, base_uv), roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	ALPHA *= albedo.a * albedo_tex.a;
	ALPHA_SCISSOR_THRESHOLD = alpha_scissor_threshold;

	// Distance Fade: Pixel Alpha
	ALPHA *= clamp(smoothstep(distance_fade_min, distance_fade_max, length(VERTEX)), 0.0, 1.0);

	// Backlight: Enabled
	vec3 backlight_tex = texture(texture_backlight, base_uv).rgb;
	BACKLIGHT = (backlight.rgb + backlight_tex);
}
"

[resource]
render_priority = 0
shader = SubResource("Shader_fp2dd")
shader_parameter/albedo = Color(1, 1, 1, 1)
shader_parameter/texture_albedo = ExtResource("1_fp2dd")
shader_parameter/distance_fade_min = 128.0
shader_parameter/distance_fade_max = 96.0
shader_parameter/alpha_scissor_threshold = 0.5
shader_parameter/albedo_texture_size = Vector2i(256, 256)
shader_parameter/point_size = 0.0
shader_parameter/roughness = 1.0
shader_parameter/metallic_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/backlight = Color(0.5, 0.5, 0.5, 1)
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/sway_strength = 0.516
shader_parameter/sway_speed = 2.0
shader_parameter/sway_scale = 1.0
